openapi: 3.1.0
info:
  title: OpenAPI definition
  version: v0
servers:
- description: Generated server url
  url: http://localhost:8080
tags:
- description: the diaries API
  name: diaries
paths:
  /diaries:
    get:
      operationId: diariesGet
      parameters:
      - in: query
        name: page
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - in: query
        name: size
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageDiaryResponse"
          description: OK
        default:
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: exception
      tags:
      - diaries
    post:
      operationId: diariesPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DiaryRequest"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiaryResponse"
          description: 作成成功
        default:
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: exception
      security:
      - bearerAuth: []
      summary: 日記の新規作成
      tags:
      - diaries
  /diaries/{id}:
    delete:
      operationId: diariesIdDelete
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "204":
          description: 削除成功（レスポンスボディなし）
        "404":
          description: 見つかりません
        default:
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: exception
      security:
      - bearerAuth: []
      summary: 日記の削除
      tags:
      - diaries
    get:
      operationId: diariesIdGet
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiaryResponse"
          description: 取得成功
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiaryResponse"
          description: 見つかりません
        default:
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: exception
      security:
      - bearerAuth: []
      summary: 日記の取得
      tags:
      - diaries
    put:
      operationId: diariesIdPut
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DiaryRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiaryResponse"
          description: 更新成功
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiaryResponse"
          description: 見つかりません
        default:
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: exception
      security:
      - bearerAuth: []
      summary: 日記の更新
      tags:
      - diaries
  /login:
    post:
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/LoginResponse"
          description: OK
        default:
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: exception
      tags:
      - login-controller
  /tasks:
    get:
      operationId: getTask
      parameters:
      - in: query
        name: page
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - in: query
        name: size
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageTaskResponse"
          description: OK
        default:
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: exception
      tags:
      - task-controller
    post:
      operationId: createTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskRequest"
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TaskResponse"
          description: OK
        default:
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: exception
      tags:
      - task-controller
  /tasks/{taskId}:
    get:
      operationId: getTaskDetail
      parameters:
      - in: path
        name: taskId
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TaskResponse"
          description: OK
        default:
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: exception
      tags:
      - task-controller
    put:
      operationId: updateTask
      parameters:
      - in: path
        name: taskId
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskRequest"
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                type: string
          description: OK
        default:
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: exception
      tags:
      - task-controller
  /users/me:
    get:
      operationId: userInfo
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UsersResponse"
          description: OK
        default:
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: exception
      tags:
      - login-controller
components:
  schemas:
    DiaryRequest:
      type: object
      properties:
        body:
          type: string
          example: たくさんコードを書いた
        date:
          type: string
          format: date
          example: 2025-05-18
        title:
          type: string
          example: プログラミング
      required:
      - body
      - date
      - title
    DiaryResponse:
      type: object
      properties:
        body:
          type: string
          example: たくさんコードを書いた
        date:
          type: string
          format: date
          example: 2025-05-18
        id:
          type: integer
          format: int32
          example: 123
        title:
          type: string
          example: プログラミング
      required:
      - body
      - date
      - id
      - title
    ErrorResponse:
      type: object
      description: エラー時のレスポンス
      properties:
        message:
          type: string
    LoginRequest:
      type: object
      properties:
        password:
          type: string
        username:
          type: string
    LoginResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: "#/components/schemas/UsersResponse"
    PageDiaryResponse:
      type: object
      properties:
        username:
          type: string
        id:
          type: integer
          format: int64
    PageTaskResponse:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: "#/components/schemas/PageableObject"
        size:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
    PageTaskResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/TaskResponse"
        empty:
          type: boolean
        first:
          type: boolean
        last:
          type: boolean
        number:
          type: integer
          format: int32
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: "#/components/schemas/PageableObject"
        size:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        sort:
          $ref: "#/components/schemas/SortObject"
        unpaged:
          type: boolean
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
    TaskRequest:
      type: object
      properties:
        completedAt:
          type: string
          format: date-time
        dueAt:
          type: string
          format: date-time
        isAllDay:
          type: boolean
        loadScore:
          type: integer
          format: int32
        memo:
          type: string
        title:
          type: string
    TaskResponse:
      type: object
      properties:
        completedAt:
          type: string
          format: date-time
        dueAt:
          type: string
          format: date-time
        id:
          type: integer
          format: int32
        isAllDay:
          type: boolean
        loadScore:
          type: integer
          format: int32
        memo:
          type: string
        title:
          type: string
    UsersResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        nickname:
          type: string
        username:
          type: string
