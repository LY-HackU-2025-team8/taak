/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.team8.taaks.controller;

import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import com.team8.taaks.model.DiaryRequest;
import com.team8.taaks.model.DiaryResponse;
import com.team8.taaks.model.DiarySummary;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-19T23:52:41.245102182+09:00[Asia/Tokyo]", comments = "Generator version: 7.13.0")
@Validated
@Tag(name = "diaries", description = "the diaries API")
public interface DiariesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /diaries : 日記一覧取得
     * ユーザーに紐づく日記の一覧を返す
     *
     * @return 一覧取得成功 (status code 200)
     */
    @Operation(
        operationId = "diariesGet",
        summary = "日記一覧取得",
        description = "ユーザーに紐づく日記の一覧を返す",
        responses = {
            @ApiResponse(responseCode = "200", description = "一覧取得成功", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DiarySummary.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/diaries",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<DiarySummary>> diariesGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"id\" : 1, \"title\" : \"お出かけ\" }, { \"id\" : 1, \"title\" : \"お出かけ\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /diaries/{id} : 日記の削除
     *
     * @param id  (required)
     * @return 削除成功（レスポンスボディなし） (status code 204)
     *         or 見つかりません (status code 404)
     */
    @Operation(
        operationId = "diariesIdDelete",
        summary = "日記の削除",
        responses = {
            @ApiResponse(responseCode = "204", description = "削除成功（レスポンスボディなし）"),
            @ApiResponse(responseCode = "404", description = "見つかりません")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/diaries/{id}"
    )
    
    default ResponseEntity<Void> diariesIdDelete(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /diaries/{id} : 日記の取得
     *
     * @param id  (required)
     * @return 取得成功 (status code 200)
     *         or 見つかりません (status code 404)
     */
    @Operation(
        operationId = "diariesIdGet",
        summary = "日記の取得",
        responses = {
            @ApiResponse(responseCode = "200", description = "取得成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DiaryResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "見つかりません")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/diaries/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DiaryResponse> diariesIdGet(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"2025-05-18\", \"id\" : 123, \"title\" : \"プログラミング\", \"body\" : \"たくさんコードを書いた\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /diaries/{id} : 日記の更新
     *
     * @param id  (required)
     * @param diaryRequest  (required)
     * @return 更新成功 (status code 200)
     *         or 見つかりません (status code 404)
     */
    @Operation(
        operationId = "diariesIdPut",
        summary = "日記の更新",
        responses = {
            @ApiResponse(responseCode = "200", description = "更新成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DiaryResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "見つかりません")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/diaries/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DiaryResponse> diariesIdPut(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "DiaryRequest", description = "", required = true) @Valid @RequestBody DiaryRequest diaryRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"2025-05-18\", \"id\" : 123, \"title\" : \"プログラミング\", \"body\" : \"たくさんコードを書いた\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /diaries : 日記の新規作成
     *
     * @param diaryRequest  (required)
     * @return 作成成功 (status code 201)
     */
    @Operation(
        operationId = "diariesPost",
        summary = "日記の新規作成",
        responses = {
            @ApiResponse(responseCode = "201", description = "作成成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DiaryResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/diaries",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DiaryResponse> diariesPost(
        @Parameter(name = "DiaryRequest", description = "", required = true) @Valid @RequestBody DiaryRequest diaryRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"2025-05-18\", \"id\" : 123, \"title\" : \"プログラミング\", \"body\" : \"たくさんコードを書いた\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
