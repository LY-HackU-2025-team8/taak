name: Copy Issue Project Fields when PR created # PR作成時にリンクされたIssueのフィールドをPRカードにコピー
# PRがオープンされたときに実行
on:
  pull_request:
    types: [opened]

jobs:
  sync_issue_fields:
    runs-on: ubuntu-latest
    steps:
      # GitHub Appのアクセストークンを生成します
      - name: Generate GitHub App token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PEM }}

      # プロジェクトからPriority, Timeline, Domain, SprintのフィールドIDを取得します
      - name: Fetch project field definitions
        id: get-fields
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          gh api graphql -f query='\
            query($org:String!,$number:Int!){\
              organization(login:$org){\
                projectV2(number:$number){\
                  id\
                  fields(first:10){\
                    nodes{\
                      __typename\
                      ... on ProjectV2Field{ id name }\
                      ... on ProjectV2SingleSelectField{ id name options{id name }}\
                      ... on ProjectV2DateField{ id name }\
                    }\
                  }\
                }\
              }\
            }' -f org=${{ github.repository_owner }} -F number=1 > fields.json
          echo "PROJECT_ID=$(jq -r .data.organization.projectV2.id fields.json)" >> $GITHUB_ENV
          echo "PRIORITY_FIELD_ID=$(jq -r '.data.organization.projectV2.fields.nodes[]|select(.name==\"Priority\")|.id' fields.json)" >> $GITHUB_ENV
          echo "TIMELINE_FIELD_ID=$(jq -r '.data.organization.projectV2.fields.nodes[]|select(.name==\"Timeline\")|.id' fields.json)" >> $GITHUB_ENV
          echo "DOMAIN_FIELD_ID=$(jq -r '.data.organization.projectV2.fields.nodes[]|select(.name==\"Domain\")|.id' fields.json)" >> $GITHUB_ENV
          echo "SPRINT_FIELD_ID=$(jq -r '.data.organization.projectV2.fields.nodes[]|select(.name==\"Sprint\")|.id' fields.json)" >> $GITHUB_ENV

      # PR本文から「close #[番号]」形式でリンクされたIssue番号を抽出します
      - name: Identify linked issue
        id: get-issue
        run: |
          ISSUE_NUM=$(echo "${{ github.event.pull_request.body }}" | grep -oE 'close #[0-9]+' | head -1 | grep -oE '[0-9]+')
          echo "ISSUE_NUMBER=$ISSUE_NUM" >> $GITHUB_ENV

      # 抽出したIssueのプロジェクトアイテムIDとフィールド値を取得します
      - name: Fetch issue's project item and values
        id: fetch-issue
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
          ISSUE_NUMBER: ${{ env.ISSUE_NUMBER }}
        run: |
          gh api graphql -f query='\
            query($owner:String!,$repo:String!,$num:Int!){\
              repository(owner:$owner,name:$repo){\
                issue(number:$num){\
                  projectItems(first:1){\
                    nodes{\
                      id\
                      fieldValues(first:10){\
                        nodes{\
                          __typename\
                          ... on ProjectV2ItemFieldSingleSelectValue{ field{name} name }\
                          ... on ProjectV2ItemFieldDateValue{ field{name} date }\
                        }\
                      }\
                    }\
                  }\
                }\
              }\
            }' -f owner=${{ github.repository_owner }} -f repo=${{ github.event.repository.name }} -F num=${{ env.ISSUE_NUMBER }} > issue.json
          echo "ISSUE_ITEM_ID=$(jq -r .data.repository.issue.projectItems.nodes[0].id issue.json)" >> $GITHUB_ENV
          echo "PRIORITY_VAL=$(jq -r '.data.repository.issue.projectItems.nodes[0].fieldValues.nodes[]|select(.field.name==\"Priority\")|.name' issue.json)" >> $GITHUB_ENV
          echo "TIMELINE_VAL=$(jq -r '.data.repository.issue.projectItems.nodes[0].fieldValues.nodes[]|select(.field.name==\"Timeline\")|.date' issue.json)" >> $GITHUB_ENV
          echo "DOMAIN_VAL=$(jq -r '.data.repository.issue.projectItems.nodes[0].fieldValues.nodes[]|select(.field.name==\"Domain\")|.name' issue.json)" >> $GITHUB_ENV
          echo "SPRINT_VAL=$(jq -r '.data.repository.issue.projectItems.nodes[0].fieldValues.nodes[]|select(.field.name==\"Sprint\")|.name' issue.json)" >> $GITHUB_ENV

      # PRをプロジェクトカードとして追加し、アイテムIDを取得します
      - name: Add PR to project
        id: add-pr
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
          PR_ID: ${{ github.event.pull_request.node_id }}
          PROJECT_ID: ${{ env.PROJECT_ID }}
        run: |
          ITEM_ID=$(gh api graphql -f query='\
            mutation($proj:ID!,$pr:ID!){\
              addProjectV2ItemById(input:{projectId:$proj,contentId:$pr}){item{id}}\
            }' -f proj=$PROJECT_ID -f pr=$PR_ID --jq '.data.addProjectV2ItemById.item.id')
          echo "ITEM_ID=$ITEM_ID" >> $GITHUB_ENV

      # Issueから取得したフィールド値をPRカードにコピーします
      - name: Copy fields to PR card
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
          PROJECT_ID: ${{ env.PROJECT_ID }}
          ITEM_ID: ${{ env.ITEM_ID }}
          PRIORITY_FIELD_ID: ${{ env.PRIORITY_FIELD_ID }}
          TIMELINE_FIELD_ID: ${{ env.TIMELINE_FIELD_ID }}
          DOMAIN_FIELD_ID: ${{ env.DOMAIN_FIELD_ID }}
          SPRINT_FIELD_ID: ${{ env.SPRINT_FIELD_ID }}
          PRIORITY_VAL: ${{ env.PRIORITY_VAL }}
          TIMELINE_VAL: ${{ env.TIMELINE_VAL }}
          DOMAIN_VAL: ${{ env.DOMAIN_VAL }}
          SPRINT_VAL: ${{ env.SPRINT_VAL }}
        run: |
          # Priorityを設定
          PRIORITY_OPT=$(jq -r '.data.organization.projectV2.fields.nodes[]|select(.name=="Priority").options[]|select(.name=="'"$PRIORITY_VAL"'").id' fields.json)
          gh api graphql -f query='\
            mutation($proj:ID!,$item:ID!,$field:ID!,$val:String!){\
              updateProjectV2ItemFieldValue(input:{projectId:$proj,itemId:$item,fieldId:$field,value:{singleSelectOptionId:$val}}){projectV2Item{id}}\
            }' -f proj=$PROJECT_ID -f item=$ITEM_ID -f field=$PRIORITY_FIELD_ID -f val=$PRIORITY_OPT --silent
          # Timeline(日付)を設定
          gh api graphql -f query='\
            mutation($proj:ID!,$item:ID!,$field:ID!,$dt:DateTime!){\
              updateProjectV2ItemFieldValue(input:{projectId:$proj,itemId:$item,fieldId:$field,value:{date:$dt}}){projectV2Item{id}}\
            }' -f proj=$PROJECT_ID -f item=$ITEM_ID -f field=$TIMELINE_FIELD_ID -f dt="$TIMELINE_VAL" --silent
          # Domainを設定
          DOMAIN_OPT=$(jq -r '.data.organization.projectV2.fields.nodes[]|select(.name=="Domain").options[]|select(.name=="'"$DOMAIN_VAL"'").id' fields.json)
          gh api graphql -f query='\
            mutation($proj:ID!,$item:ID!,$field:ID!,$val:String!){\
              updateProjectV2ItemFieldValue(input:{projectId:$proj,itemId:$item,fieldId:$field,value:{singleSelectOptionId:$val}}){projectV2Item{id}}\
            }' -f proj=$PROJECT_ID -f item=$ITEM_ID -f field=$DOMAIN_FIELD_ID -f val=$DOMAIN_OPT --silent
          # Sprintを設定
          SPRINT_OPT=$(jq -r '.data.organization.projectV2.fields.nodes[]|select(.name=="Sprint").options[]|select(.name=="'"$SPRINT_VAL"'").id' fields.json)
          gh api graphql -f query='\
            mutation($proj:ID!,$item:ID!,$field:ID!,$val:String!){\
              updateProjectV2ItemFieldValue(input:{projectId:$proj,itemId:$item,fieldId:$field,value:{singleSelectOptionId:$val}}){projectV2Item{id}}\
            }' -f proj=$PROJECT_ID -f item=$ITEM_ID -f field=$SPRINT_FIELD_ID -f val=$SPRINT_OPT --silent
